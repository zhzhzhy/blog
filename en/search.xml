<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>甘肃白银马拉松事故-天气再分析</title>
      <link href="/en/2021/05/26/2021/marathon/"/>
      <url>/en/2021/05/26/2021/marathon/</url>
      
        <content type="html"><![CDATA[<p>#骑行# #旅行志# #天气#<br>5月22日，一个冷涡在甘肃抛下大量冷空气，在乌鞘岭余脉上诱发了致命的狂风冰雨，多位久负盛名的越野“跑神”永远失去生命。这场狂风冰雨到底有多极端，才能酿成如此灾难？</p><p>事情还是要从那个靠近我国的巨型冷涡说起。5月20-21日，它来到新疆；5月22-23日，它先后掠过西北、华北，23日晚已来到黑龙江西界。冷涡所到之处，北方皆有降温，其中新疆、内蒙古降温猛烈，阿勒泰一度逼近0度，内蒙古发布了寒潮预警。</p><p><img src="/en/2021/05/26/2021/marathon/0.jpg"><br>5月21-22日，河西五市将会有降温，幅度为4-6度；景泰气象台也发了大风蓝色预警。而在此之前，白银市景泰县阳光普照，气温节节攀升，5月21日下午最高已达25.6度，站在太阳下，是妥妥的夏天感觉。</p><p>一边是阳光烘烤下的夏天气息，一边是有寒冬实力的巨大冷涡，极端天气就此酝酿。5月22日早晨，冷涡中心来到毛乌素沙漠以北，大量寒冷空气从几千米的高空“跳伞”，俯冲进入黄河上游地区，一道巨大的冷锋云带在甘肃、宁夏和内蒙古形成。</p><p>————以上内容摘自中国气象爱好者—————–</p><p>欧洲中期天气预报中心（European Centre for Medium-Range Weather Forecasts 简称 ECMWF）是一个包括34个国家支持的国际性组织，是当今全球独树一帜的国际性天气预报研究和业务机构</p><p>ECMWF与世界各国气象预报机构在天气预报领域有广泛的联系。ECMWF主要提供10天的中期数值预报产品，各成员国通过专用的区域气象数据通信网络得到这些产品后做出各自的中期预报，同时ECMWF也通过由世界气象组织（WMO）维护的全球通信网络向世界所有国家发送部分有用的中期数值预报产品。其使用的模式充分利用四维同化资料，可提供全球在65公里高度内60层的40公里网格密度共20，911，680个点的风、温、湿预报</p><p>如果我们用欧洲中期天气ECMWF预报的模型再来重现一下当时的天气，分析这次事故的天气大环境,这样的极端天气是否能被预测到呢？又有哪些措施可以防止悲剧再次发生呢？</p><p>借助于ECMWF强大的再分析模型，我们选择时间点为2021年5月22日上午8点 ，地点黄河石林景区入口</p><p>此时，根据数值预报模型，西边几十公里的新堡乡下起了小雪，而此时景泰县和比赛地也下起了小雨，如下图（白点为黄河石林景区入口，比赛起点）</p><p>上午9点，比赛正式开始。上午11点，此时景泰县和比赛地也下起了中雨，西边几十公里下起了中雪，由于换装点在CP3，选手只能在短袖短裤的装备下着奔跑</p><p><img src="/en/2021/05/26/2021/marathon/sign-1.jpg"><br><img src="/en/2021/05/26/2021/marathon/sign-2.jpg"></p><p>我们再来看看白天比赛时的温度和风速如何：</p><p>拖动时间条，我们分析发现，比赛开始时，气温尚有10-11度，到了下午14点，气温已经低到5-6度了，16：00稍有回升，但仍只有7-8度（想象一下大冬天洗完澡在大街上站着几个小时）</p><p><img src="/en/2021/05/26/2021/marathon/temp-1.jpg"><br><img src="/en/2021/05/26/2021/marathon/temp-2.jpg"><br><img src="/en/2021/05/26/2021/marathon/temp-3.jpg"></p><p>稍微有点常识的人也知道，这种天气相当于南方大部分的冬天，绝不能短袖短裤在户外长时间活动，主办方这点可能根本没有考虑到。</p><p>再来看看风速：</p><p><img src="/en/2021/05/26/2021/marathon/wind-1.jpg"><br><img src="/en/2021/05/26/2021/marathon/wind-2.jpg"><br><img src="/en/2021/05/26/2021/marathon/wind-3.jpg"></p><p>从风速可以看出，从早上7点到下午13点，风速一直都是30-40km/h，14：00才慢慢减弱到20-30km/h，这和参赛选手对风和天气的描述是一致的。</p><p>这些气息参数下，可以想见是多么致命的风寒，冬天寒潮南下时，大家都有这样的经验：同样的温度，刮风比不刮风冷，刮大风比刮小风冷，这就是风寒效应。如果刮风的同时还下雨，会冷上加冷；如果你淋了雨，又暴露在刮风下雨的环境中，会冷上加冷再加冷，因为大风会迫使你身上的水蒸发，再带走热量。</p><p>通过以上ECMWF气象模型的再分析,再结合当地气象部门的数据，我们可以推测出，这样的极端天气，其实是完全可以预测出来的。更何况当地气象部门已经在前一天发布了大风蓝色预警，比赛主办方更应该对此高度重视。</p><p>如果我们把数值模型的生成时间调整到比赛开始前一天，这些预测结果与第二天相差无几，说明这样的低温和大风，也是完全可以预测的。</p><p>那么，对于今后的户外活动，我们应该怎么去规避风险呢？<br>一是主办方需要相应的应急预案，这是首要的，你要考虑到活动可能遭受到的风险和危险，要有足够的后备资源和救援人力来应对<br>另外我有一个比较好的建议，如果是户外活动不太确定或者山区偏远地区的天气，查看数值天气预报，因为传统天气预报是点对点的，主要针对人口密集的城市，那么对于偏远户外山区的预报，可能不太精准，那么，良好的应急预案是首要的，针对户外的天气，重大户外活动建议与当地气象部门报备，这样可以针对性的获取极端天气的预报。</p><p>个人和小团体出游呢，如果是户外徒步项目，带够足够的衣物和干粮，找有经验的领队，切忌独自冒险他，天气可以参考晴天钟等数值模型应用，做好良好的应急预案</p><p>顺便打个软广：我这边可以为各种户外徒步露营摄影项目提供一些天气咨询服务，数据专业准确可靠！也可查询历史天气记录 ，也只收取一点辛苦费，毕竟这些ECMWF数据也是需要一年几千r的授权费的<br><a href="https://www.coolapk.com/feed/27224865?shareKey=ODBmYWE0NDk1OWJmNjBhZTRlMWU~&amp;shareUid=1249995&amp;shareFrom=com.coolapk.market_11.2.2">https://www.coolapk.com/feed/27224865?shareKey=ODBmYWE0NDk1OWJmNjBhZTRlMWU~&amp;shareUid=1249995&amp;shareFrom=com.coolapk.market_11.2.2</a></p>]]></content>
      
      
      <categories>
          
          <category> 户外 </category>
          
          <category> outdoor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 马拉松 </tag>
            
            <tag> marathon </tag>
            
            <tag> 户外 </tag>
            
            <tag> outdoor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim-switch-tab shortcut</title>
      <link href="/en/2021/04/19/2021/vim-switch-tab/"/>
      <url>/en/2021/04/19/2021/vim-switch-tab/</url>
      
        <content type="html"><![CDATA[<blockquote><p>you can open another file while vim is open with :tabe filename and to switch to the other file you type :tabn or :tabp for next and previous accordingly.<br>The keyboard shortcuts gT and gt can also be used to switch tabs when you are not in editing mode (i.e. not in insert, replace etc modes). On some systems Ctrl+Alt+Page Up and Ctrl+Alt+Page Down also allow tab-switching, but this does not always work (for example, it won’t work in the OS X terminal ‘out of the box’).</p></blockquote><p><a href="https://unix.stackexchange.com/questions/27586/how-can-i-edit-multiple-files-in-vim"></a></p><table><thead><tr><th align="center">shortcut</th><th align="center">function</th></tr></thead><tbody><tr><td align="center"><code>:tabn</code> <code>:tabp</code></td><td align="center">next and previous accordingly</td></tr><tr><td align="center"><code>gt</code> <code>gT</code></td><td align="center">switch tabs when you are not in editing mode</td></tr><tr><td align="center"><code>Ctrl</code>+<code>Alt</code>+<code>Page</code> <code>Down</code>OR<code>Up</code></td><td align="center">tab-switching</td></tr><tr><td align="center"><code>:tabe</code> <code>filename</code></td><td align="center">open another file</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
          <category> shortcut </category>
          
          <category> nvim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> shortcut </tag>
            
            <tag> nvim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>银行家算法 Banker&#39;s Algorithm</title>
      <link href="/en/2021/04/19/2021/Banker&#39;s_Algorithm/"/>
      <url>/en/2021/04/19/2021/Banker&#39;s_Algorithm/</url>
      
        <content type="html"><![CDATA[<p>对于计算机中的死锁，我们有四种处理的方法，分别为预防死锁、避免死锁、检测死锁和解除死锁</p><blockquote><p>The banker’s algorithm is a resource allocation and deadlock avoidance algorithm that tests for safety by simulating the allocation for predetermined maximum possible amounts of all resources, then makes an “s-state” check to test for possible activities, before deciding whether allocation should be allowed to continue.</p></blockquote><blockquote><p>银行家算法（Banker’s Algorithm）是一个<strong>避免死锁</strong>（Deadlock）的著名算法，是由艾兹赫尔·戴克斯特拉在1965年为T.H.E系统设计的一种避免死结产生的演算法.它以银行借贷系统的分配策略为基础，判断并保证系统的安全运行.</p></blockquote><p>银行家算法的名字来源于该算法原本是为银行系统设计的，以确保银行在发放现金贷款时，不会发生不能满足所有客户需要的情况，在OS中可以用它来避免死锁.</p><p>银行家算法的实质就是要设法保证系统动态分配资源后不进入不安全状态，以避免可能产生的死锁</p><ul><li>为实现银行家算法，在系统中必须设置这样四个数据结构:</li></ul><ol><li>可利用资源向量Avaliable.这是一个含有m个元素的数组，其中每一个元素代表一类可利用的资源数目，其初始值是系统所配置的该类全部可用资源的数目，其中的每一个元素代表一类可利用的资源数目，其初始值是系统中所配置的该类全部可用资源的数目，其数值随该类资源的分配和回收而动态的改变.如果$Available[j]=K$，则表示系统中现有$R_j$类资源的最大数目为K.</li><li>最大需求矩阵Max.是一个n×m的矩阵，定义了系统中n个进程中的每一个进程对m类资源的最大需求.如果$Max[i, j]=K$，则表示进程i需要$R_j$类资源的最大数目为K.</li><li>分配矩阵Allocation.是一个n×m的矩阵，定义了系统中每一类资源当前已分配给每一进程的资源数.如果Allocation[i, j]=K，则表示进程i当前已分得$R_j$类资源的数目为K.</li><li>需求矩阵Need.是一个n×m的矩阵，用以表示每一个进程尚需的各类资源数.如果$Need[i, j]=K$，则表示进程i还需要$R_j$类资源K个方能完成其任务.</li></ol><p>它们之间的关系为: $Need[i, j]=Max[i, j]-Allocation[i,j]$</p><h2 id="银行家算法"><a href="#银行家算法" class="headerlink" title="银行家算法"></a>银行家算法</h2><p>设 Request i是进程 $P_i$的请求向量，如果 $Request i[j]=K$，表示进程 $P_i$需要 K 个 $R_j$类型的资源.当 $P_i$发出资源请求后，系统按下述步骤进行检查:</p><p>(1) 如果 $Request i[j]≤Need[i,j]$，便转向步骤(2);否则认为出错，因为它所需要的资源数已超过它所宣布的最大值.</p><p>(2) 如果 $Request i[j]≤Available[j]$，便转向步骤(3);否则，表示尚无足够资源，$P_i$ 须等待.</p><p>(3) 系统试探着把资源分配给进程 $P_i$，并修改下面数据结构中的数值:</p><p>$Available[j]= Available[j]-Request_i[j]$;</p><p>$Allocation[i,j]= Allocation[i,j]+Request_i[j]$;</p><p>$Need[i,j]= Need[i,j]-Request_i[j]$;</p><p>(4) 系统执行<strong>安全性算法</strong>，检查此次资源分配后系统是否处于安全状态.若安全，才正式将资源分配给进程 $P_i$，以完成本次分配;否则，将本次的试探分配作废，恢复原来的资源分配状态，让进程 $P_i$等待.</p><h2 id="安全性算法"><a href="#安全性算法" class="headerlink" title="安全性算法"></a>安全性算法</h2><p>系统所执行的安全性算法可描述如下:</p><p>(1) 设置两个向量:</p><ol><li><p>工作向量 Work，它表示系统可提供给进程继续运行所需的各类资源数目，它含有 m个元素，在执行安全算法开始时，$Work=Available$.</p></li><li><p>Finish，它表示系统是否有足够的资源分配给进程，使之运行完成.开始时先做$Finish[i]=false$;当有足够资源分配给进程时，再令 $Finish[i]=true$.</p></li></ol><p>(2) 从进程集合中找到一个能满足下述条件的进程:</p><ol><li><p>$Finish[i]=false$;</p></li><li><p>$Need[i,j]≤Work[j]$;若找到，执行步骤(3)，否则，执行步骤(4). </p></li></ol><p>(3) 当进程 Pi获得资源后，可顺利执行，直至完成，并释放出分配给它的资源，故应执行:</p><p>$Work[j]= Work[j]+Allocation[i,j];$</p><p>$Finish[i]=true;$</p><p>go to step 2;</p><p>(4) 如果所有进程的 $Finish[i]=true$ 都满足，则表示系统处于安全状态;否则，系统处于不安全状态.</p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> concurrent </category>
          
          <category> 操作系统 </category>
          
          <category> deadlock </category>
          
          <category> 死锁 </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
            <tag> concurrent </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> deadlock </tag>
            
            <tag> 死锁 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哲学家进餐问题(Dining philosophers problem)</title>
      <link href="/en/2021/04/18/2021/Dining_philosophers_problem/"/>
      <url>/en/2021/04/18/2021/Dining_philosophers_problem/</url>
      
        <content type="html"><![CDATA[<blockquote><p>哲学家就餐问题可以这样表述，假设有五位哲学家围坐在一张圆形餐桌旁，做以下两件事情之一：吃饭，或者思考。吃东西的时候，他们就停止思考，思考的时候也停止吃东西。餐桌中间有一大碗意大利面，每位哲学家之间各有一支餐叉。因为用一支餐叉很难吃到意大利面，所以假设哲学家必须用两支餐叉吃东西。他们只能使用自己左右手边的那两支餐叉。哲学家就餐问题有时也用米饭和五根筷子而不是意大利面和餐叉来描述，因为吃米饭必须用两根筷子。<br>如何设计一套规则，使得在哲学家们在完全不交谈，也就是无法知道其他人可能在什么时候要吃饭或者思考的情况下，可以在这两种状态下永远交替下去。</p></blockquote><p><img src="/en/2021/04/18/2021/Dining_philosophers_problem/Dining_philosophers_problem.png"></p><p>假设我们要求哲学家遵守以下规则：</p><pre><code>1. 哲学家在左边的叉子可用（没有其他人拿起）之前处于思考状态。如果左边的叉子可用，就拿起来。2. 哲学家等待右边的叉子可用。如果右边的叉子可用，就拿起来。3. 如果两个叉子都已经拿起来，开始吃意大利面，每次吃面都花费同样的时间。4. 吃完后先放下左边的叉子。5. 然后放下右边的叉子。6. 开始思考（进入一个循环）</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">semaphore chopstick[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;; <span class="comment">//定义信号量数组chopstick[5],并初始化</span></span><br><span class="line">Pi()&#123;  <span class="comment">//i号哲学家的进程</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">P(chopstick[i]); <span class="comment">//取左边筷子</span></span><br><span class="line">P(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]);  <span class="comment">//取右边篌子</span></span><br><span class="line">eat;</span><br><span class="line">V(chopstick[i]); <span class="comment">//放回左边筷子</span></span><br><span class="line">V(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]);  <span class="comment">//放回右边筷子</span></span><br><span class="line">think;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个解法是失败的，当每个哲学家都拿起左侧的叉子，等待右侧的叉子可用时，就会进入死锁状态，每个哲学家将永远都在等待（右边的）另一个哲学家放下叉子。</p><h2 id="正确的解法"><a href="#正确的解法" class="headerlink" title="正确的解法"></a>正确的解法</h2><ul><li>解法一<br>假设当一个哲学家左右两边的筷子都可用时，才允许他抓起筷子。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">semaphore chopstick[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;; <span class="comment">//初始化信号量</span></span><br><span class="line">semaphore mutex=l;  <span class="comment">//设置取筷子的信号量</span></span><br><span class="line"></span><br><span class="line">Pi()&#123; <span class="comment">//i号哲学家的进程</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">P(mutex); <span class="comment">//在取筷子前获得互斥量，一次只能由一个哲学家取筷子</span></span><br><span class="line">P(chopstick[i]) ; <span class="comment">//取左边筷子</span></span><br><span class="line">P(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]);  <span class="comment">//取右边筷子</span></span><br><span class="line">V(mutex); <span class="comment">//释放取筷子的信号量</span></span><br><span class="line">eat;</span><br><span class="line">V(chopstick[i]);  <span class="comment">//放回左边筷子</span></span><br><span class="line">V(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]);  <span class="comment">//放回右边筷子</span></span><br><span class="line">think;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>解法二<br>至多只允许有四位哲学家同时去拿左边的筷子，最终能保证至少有一位哲学家能够进餐，并在用完时能释放出他用过的两只筷子，从而使更多的哲学家能够进餐。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">semaphore chopstick[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;; <span class="comment">//初始化信号量</span></span><br><span class="line">semaphore eating = <span class="number">4</span>;  <span class="comment">//至多只允许四个哲学家可以同时进餐</span></span><br><span class="line"></span><br><span class="line">Pi()&#123; <span class="comment">//i号哲学家的进程</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">think;</span><br><span class="line">P(eating); <span class="comment">//请求进餐，若是第五个则挨饿</span></span><br><span class="line">P(chopstick[i]); <span class="comment">//取左边筷子</span></span><br><span class="line">P(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]) ;  <span class="comment">//取右边筷子</span></span><br><span class="line">eat;</span><br><span class="line">V(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]) ;  <span class="comment">//放回右边筷子</span></span><br><span class="line">V(chopstick[i]) ;  <span class="comment">//放回左边筷子</span></span><br><span class="line">V(eating); <span class="comment">//释放信号量给其他挨饿的哲学家</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>解法三<br>仅当哲学家的左右两只筷子均可使用，才允许他拿起筷子进餐。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">semaphore chopstick[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;; <span class="comment">//初始化信号量</span></span><br><span class="line">semaphore mutex = <span class="number">1</span>;  <span class="comment">//设置取筷子的信号量</span></span><br><span class="line"></span><br><span class="line">Pi()&#123; <span class="comment">//i号哲学家的进程</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">think;</span><br><span class="line">P(mutex); <span class="comment">//在去筷子前获得互斥量</span></span><br><span class="line">P(chopstick[i]); <span class="comment">//取左边筷子</span></span><br><span class="line">P(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]) ;  <span class="comment">//取右边筷子</span></span><br><span class="line">V(mutex); <span class="comment">//释放互斥量</span></span><br><span class="line">eat;</span><br><span class="line">V(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]) ;  <span class="comment">//放回右边筷子</span></span><br><span class="line">V(chopstick[i]) ;  <span class="comment">//放回左边筷子</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>解法四<br>规定奇数号哲学家先拿他左边的筷子，然后在去拿右边的筷子；而偶数号哲学家则相反。按此规定，将是1、2号哲学家竞争1号筷子；3、4号哲学家竞争3号筷子。</li></ul><p>即5位哲学家都先竞争奇数号筷子，获得后，再去竞争偶数号筷子，最后总会有一位哲学家能够获得两只筷子而进餐。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">semaphore chopstick[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;; <span class="comment">//初始化信号量</span></span><br><span class="line"></span><br><span class="line">Pi()&#123; <span class="comment">//i号哲学家的进程</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">think;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">P(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]) ;  <span class="comment">//取右边筷子</span></span><br><span class="line">P(chopstick[i]); <span class="comment">//取左边筷子</span></span><br><span class="line">eat;</span><br><span class="line">V(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]) ;  <span class="comment">//放回右边筷子</span></span><br><span class="line">V(chopstick[i]) ;  <span class="comment">//放回左边筷子</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;   <span class="comment">//奇数哲学家，先左后右</span></span><br><span class="line">P(chopstick[i]); <span class="comment">//取左边筷子</span></span><br><span class="line">P(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]) ;  <span class="comment">//取右边筷子</span></span><br><span class="line">V(mutex); <span class="comment">//释放互斥量</span></span><br><span class="line">eat;</span><br><span class="line">V(chopstick[i]) ;  <span class="comment">//放回左边筷子</span></span><br><span class="line">V(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]) ;  <span class="comment">//放回右边筷子</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>解法五<br>采用AND型信号量机制来解决，即要求每个哲学家先获得两个临界资源（筷子）后方能进餐。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">semaphore chopstick[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;; <span class="comment">//初始化信号量</span></span><br><span class="line">semaphore mutex = <span class="number">1</span>;  <span class="comment">//设置取筷子的信号量</span></span><br><span class="line"></span><br><span class="line">Pi()&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">think;</span><br><span class="line">P(chopstick[i],chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]);</span><br><span class="line">eat;</span><br><span class="line">V(chopstick[i],chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> concurrent </category>
          
          <category> 操作系统 </category>
          
          <category> 多线程 </category>
          
          <category> 死锁 </category>
          
          <category> 信号量 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> concurrent </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> 死锁 </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 信号量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP中并发编程的一些概念总结</title>
      <link href="/en/2021/04/18/2021/concurrent_programming/"/>
      <url>/en/2021/04/18/2021/concurrent_programming/</url>
      
        <content type="html"><![CDATA[<h2 id="volatile类型"><a href="#volatile类型" class="headerlink" title="volatile类型"></a>volatile类型</h2><p>Volatile关键字主要有三个功能：</p><ol><li><p>防止重排序</p></li><li><p>保证可见性</p></li><li><p>保证单次读或写操作的原子性。</p></li></ol><p>volatile修饰的变量发生修改时，volatile会强制刷新主内存.</p><p>在CSAPP的12.16节，有一个badcnt.c示例程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * badcnt.c - An improperly synchronized counter program</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* $begin badcnt */</span></span><br><span class="line"><span class="comment">/* WARNING: This code is buggy! */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;csapp.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thread</span><span class="params">(<span class="type">void</span> *vargp)</span>;  <span class="comment">/* Thread routine prototype */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Global shared variable */</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">long</span> cnt = <span class="number">0</span>; <span class="comment">/* Counter */</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">long</span> niters;</span><br><span class="line"><span class="type">pthread_t</span> tid1, tid2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Check input argument */</span></span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;usage: %s &lt;niters&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">niters = atoi(argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Create threads and wait for them to finish */</span></span><br><span class="line">Pthread_create(&amp;tid1, <span class="literal">NULL</span>, thread, &amp;niters);</span><br><span class="line">Pthread_create(&amp;tid2, <span class="literal">NULL</span>, thread, &amp;niters);</span><br><span class="line">Pthread_join(tid1, <span class="literal">NULL</span>);</span><br><span class="line">Pthread_join(tid2, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Check result */</span></span><br><span class="line"><span class="keyword">if</span> (cnt != (<span class="number">2</span> * niters))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;BOOM! cnt=%ld\n&quot;</span>, cnt);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;OK cnt=%ld\n&quot;</span>, cnt);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Thread routine */</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thread</span><span class="params">(<span class="type">void</span> *vargp)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">long</span> i, niters = *((<span class="type">long</span> *)vargp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; niters; i++) <span class="comment">//line:conc:badcnt:beginloop</span></span><br><span class="line">cnt++;                   <span class="comment">//line:conc:badcnt:endloop</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* $end badcnt */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ul><li>$H_i$: The block of instructions at the head of the loop</li><li>$L_i$: The instruction that loads the shared variable cnt into register %$rdx_i$, where %$rdx_i$ denotes the value of register %$rdx$ in thread i</li><li>$U_i$: The instruction that updates (increments) %$rdx_i$</li><li>$S_i$: The instruction that stores the updated value of %$rdx_i$ back to the shared variable cnt</li><li>$T_i$: The block of instructions at the tail of the loop</li></ul></blockquote><p>其中关于%$rdx_i$汇编语言中就能看出volatile类型的特性：从Memory读取变量到寄存器，在寄存器中改变值后，立马写回内存</p><p>volatile关键字首先具有“易变性”，声明为volatile变量编译器会强制要求读内存，相关语句不会直接使用上一条语句对应的的寄存器内容，而是重新从内存中读取。</p><h2 id="并发和并行的区别"><a href="#并发和并行的区别" class="headerlink" title="并发和并行的区别"></a>并发和并行的区别</h2><ul><li><p>Concurrent(Concurrency)  – 并发：一段时间内有多个进程执行，不强调同时执行</p></li><li><p>Parallel(Parallelism)   –  并行：一段时间内有多个进程同时执行，强调同时</p></li></ul><h2 id="semaphore-信号量"><a href="#semaphore-信号量" class="headerlink" title="semaphore(信号量)"></a>semaphore(信号量)</h2><blockquote><p><strong>Semaphores</strong> provide a convenient way to ensure <strong>mutually exclusive</strong> access to shared variables.<br>Binary semaphores whose purpose is to provide mutual exclusion are often called mutexes.</p></blockquote><blockquote><p>A semaphore, s, is a global variable with a nonnegative integer value that can only be manipulated by two special operations, called P and V :</p><ul><li>P(s):If s is nonzero, then P decrements s and returns immediately. If s is zero, then suspend the thread until s becomes nonzero and the process is restarted by a V operation. After restarting, the P operation decrements s and returns control to the caller.</li><li>V(s): The V operation increments s by 1. If there are any threads blocked at a P operation waiting for s to become nonzero, then the V operation restarts exactly one of these threads, which then completes its P operation by decrementing s.</li></ul></blockquote><p>信号量（semaphore）的数据结构为一个值和一个指针，指针指向等待该信号量的下一个进程，是一种特殊的全局变量，确保了进程能够<strong>互斥访问</strong>有限的临界资源，下文称作<code>s</code>，<code>s</code>为非负整数，即$s\ge0$</p><p>信号量的值表示相应资源的使用情况:<br>信号量$s\ge0$时，S表示可用资源的数量;$s\le0$时，表示没有资源可用，绝对值代表当前等待资源的进程数.</p><pre><code>       `P(s)`和`V(s)`是由*Edsger Dijkstra*提出的共享变量的互斥访问机制，旨在解决多线程并发中互斥资源的同步问题       在荷兰语中: P代表proberen(to test)，V代表verhogen(to increment)</code></pre><ul><li><p><code>P(s)</code>: 如果<code>s</code>不为0，执行后请求分配一个资源，S的值减1(<code>s--</code>)；当$s&lt;0$时，表示已经没有可用资源，S的绝对值表示当前等待该资源的进程数。请求者必须等待其他进程释放该类资源，才能继续运行。</p></li><li><p><code>V(s)</code>: 执行后释放一个资源，S的值加1(<code>s++</code>)；若$S&lt;0$，表示有某些进程正在等待该资源，因此要唤醒一个等待状态的进程，使之执行P操作，继续运行下去。</p></li></ul><blockquote><p>The definitions of P and V ensure that a running program can never enter a state where a properly initialized semaphore has a negative value.</p></blockquote><h2 id="临界区-Critical-section"><a href="#临界区-Critical-section" class="headerlink" title="临界区(Critical section)"></a>临界区(Critical section)</h2><p>临界区：阻止多个进程同时进入访问这些共享资源的代码段；</p><p>临界资源：一次只允许一个进程访问的资源；<br>P V操作的一般模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">P(s)</span><br><span class="line">临界区(Critical section)</span><br><span class="line">V(s)</span><br></pre></td></tr></table></figure><p>P和V是原语操作，其执行不可分割，不可中断，P和V确保了进程不会互相进入临界区，确保了线程安全</p><h2 id="mutex-互斥锁"><a href="#mutex-互斥锁" class="headerlink" title="mutex(互斥锁)"></a>mutex(互斥锁)</h2><blockquote><p>Strictly speaking, a mutex is a locking mechanism used to synchronize access to a resource. Only one task (can be a thread or process based on OS abstraction) can acquire the mutex. It means there is ownership associated with a mutex, and only the owner can release the lock (mutex).</p></blockquote><p>类似于semaphores，保护共享资源。</p><p>mutex（互斥量）也是一种二元的锁机制，只有是（1）和否（0）的两个值，和二元信号量比较相似</p><p>典型的例子就是买票：<br>票是共享资源，现在有两个线程同时过来买票。如果你不用mutex在线程里把票锁住，那么就可能出现“把同一张票卖给两个不同的人（线程）”的情况。</p><h2 id="产生死锁的四个必要条件"><a href="#产生死锁的四个必要条件" class="headerlink" title="产生死锁的四个必要条件"></a>产生死锁的四个必要条件</h2><ol><li>互斥条件：一个资源每次只能被一个进程使用。</li><li>占有且等待：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li><li>不可强行占有:进程已获得的资源，在末使用完之前，不能强行剥夺。</li><li>循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。</li></ol><h2 id="可重入性"><a href="#可重入性" class="headerlink" title="可重入性"></a>可重入性</h2><blockquote><p>有一类重要的线程安全函数，叫做可重入函数（reentrant function），其特点在于它们具有这样一种属性：当它们被多个线程调用时，不会引用任何共享数据。</p></blockquote><blockquote><p>如果所有的函数参数都是值传递，并且所有的数据引用都是本地的自动栈变量，那么函数就是显示可重入的。</p></blockquote><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><blockquote><p>We can identify four (nondisjoint) classes of thread-unsafe functions:<br>Class 1: Functions that do not protect shared variables.<br>…<br>Class 2: Functions that keep state across multiple invocations.<br>…<br>Class 3: Functions that return a pointer to a static variable.<br>…<br>Class 4: Functions that call thread-unsafe functions.</p></blockquote><p>一个函数被称为线程安全的（thread-safe），当且仅当被多个线程反复地调用时，他会一直产生正确的结果。</p><blockquote><ul><li>线程不安全函数类：</li></ul></blockquote><blockquote><ol><li>不保护共享变量的函数</li><li>保持跨越多个调用的状态的函数</li><li>返回指向静态变量的指针的函数。结果可能会被另外一个线程覆盖</li><li>调用线程不安全的函数</li></ol></blockquote><h2 id="刻画并行程序的性能"><a href="#刻画并行程序的性能" class="headerlink" title="刻画并行程序的性能"></a>刻画并行程序的性能</h2><p>理想情况下，我们期望运行时间随着核心数的增加线性下降。但实际上不会这样（书上的例子）是大于四个（四核）。他说线程多了，会有上下文切换的开销。并行程序常常被写为每个核上只运行一个线程。</p><p>绝对时间是衡量程序性能的终极标准，但是也有一些有用的相对衡量标准<br>并行程序的加速比（speedup）通常定义为 $S_p = \frac{T_1}{T_p}$ ,p 为处理器核心数，Tk 是在 k 个核上的运行时间。这个公式有时被称为强扩展（strong scaling）。当 T1 是程序顺序执行版本的执行时间时，$S_p$ 称为绝对加速比（absolute speedup），当 $T_1$ 是程序并行版本在一个核上的执行时间时，Sp 称为相对加速比（relative speedup）。绝对加速比能更真实的衡量并行的好处。</p><p>一种相关的测量量称为效率（efficiency），定义为： $E_p = \frac{S_p}{p} = \frac{T_1}{pT_p}$</p><p>加速比还有另外一面，成为弱扩展（weak scaling），在增加处理器数量的同时，增加问题的规模，这样随着处理器数量的增加，每个处理器执行的工作量不变。在这种描述下，加速比和效率被表达为单位时间完成的总工作量。</p><h2 id="消费者生产者问题-Producer-consumer-problem"><a href="#消费者生产者问题-Producer-consumer-problem" class="headerlink" title="消费者生产者问题(Producer-consumer problem)"></a>消费者生产者问题(Producer-consumer problem)</h2><p>生产者消费者问题（英语：Producer-consumer problem），描述了共享固定大小缓冲区(buffer)的两个进程——即所谓的“生产者”和“消费者”，类似于视频播放的缓冲。</p><p>生产者消费者问题在多线程中常见的问题是<strong>竞争(Race)</strong></p><p>不同进程抢着进入临界区，可能会引发<strong>死锁(Deadlock)</strong>,即多个进程握着资源但都在等待对方释放临界资源，但等待永远不可能到来。</p><h2 id="读者写者问题-Reader-Writer-Problem"><a href="#读者写者问题-Reader-Writer-Problem" class="headerlink" title="读者写者问题(Reader-Writer Problem)"></a>读者写者问题(Reader-Writer Problem)</h2><p>读者-写者问题是互斥问题的一个概括。一组并发的线程要访问一个共享对象，有些线程只读对象，其他线程只修改对象。修改的线程叫写者，只读对象的线程叫做读者。写者必须拥有对对象独占的访问，读者可以和其他读者共享对象。</p><p>这个问题有几个变种，分别基于读者和写者的优先级。第一类：读者优先。第二类：写者优先。对这两种读者-写者问题的正确解答可能导致饥饿（starvation）。饥饿就是一个线程无限期地阻塞，无法进展。比如当读者优先级高时，如果读者源源不断，那么写者就可能一直等待。</p><blockquote><p>互斥锁加锁顺序规则：给定所有互斥操作的一个全序，如果每个线程都是以一种顺序获得互斥锁并以相反的顺序释放，那么这个程序就是无死锁的。</p></blockquote><p>CSAPP书上12.25是并发缓冲区同步的例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* $begin sbufc */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;csapp.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sbuf.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Create an empty, bounded, shared FIFO buffer with n slots */</span></span><br><span class="line"><span class="comment">/* $begin sbuf_init */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sbuf_init</span><span class="params">(<span class="type">sbuf_t</span> *sp, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">sp-&gt;buf = Calloc(n, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">sp-&gt;n = n;                       <span class="comment">/* Buffer holds max of n items */</span></span><br><span class="line">sp-&gt;front = sp-&gt;rear = <span class="number">0</span>;        <span class="comment">/* Empty buffer iff front == rear */</span></span><br><span class="line">Sem_init(&amp;sp-&gt;mutex, <span class="number">0</span>, <span class="number">1</span>);      <span class="comment">/* Binary semaphore for locking */</span></span><br><span class="line">Sem_init(&amp;sp-&gt;slots, <span class="number">0</span>, n);      <span class="comment">/* Initially, buf has n empty slots */</span></span><br><span class="line">Sem_init(&amp;sp-&gt;items, <span class="number">0</span>, <span class="number">0</span>);      <span class="comment">/* Initially, buf has zero data items */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* $end sbuf_init */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Clean up buffer sp */</span></span><br><span class="line"><span class="comment">/* $begin sbuf_deinit */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sbuf_deinit</span><span class="params">(<span class="type">sbuf_t</span> *sp)</span></span><br><span class="line">&#123;</span><br><span class="line">Free(sp-&gt;buf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* $end sbuf_deinit */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Insert item onto the rear of shared buffer sp */</span></span><br><span class="line"><span class="comment">/* $begin sbuf_insert */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sbuf_insert</span><span class="params">(<span class="type">sbuf_t</span> *sp, <span class="type">int</span> item)</span></span><br><span class="line">&#123;</span><br><span class="line">P(&amp;sp-&gt;slots);                          <span class="comment">/* Wait for available slot */</span></span><br><span class="line">P(&amp;sp-&gt;mutex);                          <span class="comment">/* Lock the buffer */</span></span><br><span class="line">sp-&gt;buf[(++sp-&gt;rear)%(sp-&gt;n)] = item;   <span class="comment">/* Insert the item */</span></span><br><span class="line">V(&amp;sp-&gt;mutex);                          <span class="comment">/* Unlock the buffer */</span></span><br><span class="line">V(&amp;sp-&gt;items);                          <span class="comment">/* Announce available item */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* $end sbuf_insert */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Remove and return the first item from buffer sp */</span></span><br><span class="line"><span class="comment">/* $begin sbuf_remove */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sbuf_remove</span><span class="params">(<span class="type">sbuf_t</span> *sp)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> item;</span><br><span class="line">P(&amp;sp-&gt;items);                          <span class="comment">/* Wait for available item */</span></span><br><span class="line">P(&amp;sp-&gt;mutex);                          <span class="comment">/* Lock the buffer */</span></span><br><span class="line">item = sp-&gt;buf[(++sp-&gt;front)%(sp-&gt;n)];  <span class="comment">/* Remove the item */</span></span><br><span class="line">V(&amp;sp-&gt;mutex);                          <span class="comment">/* Unlock the buffer */</span></span><br><span class="line">V(&amp;sp-&gt;slots);                          <span class="comment">/* Announce available slot */</span></span><br><span class="line"><span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* $end sbuf_remove */</span></span><br><span class="line"><span class="comment">/* $end sbufc */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>item信号量控制缓冲区剩余的资源量，mutex是缓冲区的互斥锁，slot信号量表示空余的缓冲区</p><blockquote><p>Like the solutions to many synchronization problems, it is subtle and deceptively simple. The w semaphore controls access to the critical sections that access the shared object. The mutex semaphore protects access to the shared readcnt variable, which counts the number of readers currently in the critical section. A writer locks the w mutex each time it enters the critical section, and unlocks it each time it leaves. This guarantees that there is at most one writer in the critical section at any point in time. On the other hand, only the first reader to enter the critical section locks w, and only the last reader to leave the critical section unlocks it. The w mutex is ignored by readers who enter and leave while other readers are present. This means that as long as a single reader holds the w mutex, an unbounded number of readers can enter the critical section unimpeded.</p></blockquote><h3 id="第一个读者-写者解法-读者优先"><a href="#第一个读者-写者解法-读者优先" class="headerlink" title="第一个读者-写者解法(读者优先)"></a>第一个读者-写者解法(读者优先)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Global variables */</span></span><br><span class="line"><span class="type">int</span> readcnt; <span class="comment">/* Initially = 0 */</span></span><br><span class="line"><span class="type">sem_t</span> mutex, w; <span class="comment">/* Both initially = 1 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">reader</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">P(&amp;mutex);</span><br><span class="line">readcnt++;</span><br><span class="line"><span class="keyword">if</span> (readcnt == <span class="number">1</span>) <span class="comment">/* First in */</span></span><br><span class="line">P(&amp;w);</span><br><span class="line">V(&amp;mutex);</span><br><span class="line"><span class="comment">/* Critical section */</span></span><br><span class="line"><span class="comment">/* Reading happens */</span></span><br><span class="line">P(&amp;mutex);</span><br><span class="line">readcnt--;</span><br><span class="line"><span class="keyword">if</span> (readcnt == <span class="number">0</span>) <span class="comment">/* Last out */</span></span><br><span class="line">V(&amp;w);</span><br><span class="line">V(&amp;mutex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">writer</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">P(&amp;w);</span><br><span class="line"><span class="comment">/* Critical section */</span></span><br><span class="line"><span class="comment">/* Writing happens */</span></span><br><span class="line">V(&amp;w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mutex 保护readcnt(代表当前的Reader数量),w保护代码的临界区，确保一段时间只有1个线程在读写</p><h3 id="第二个读者-写者解法-写者优先"><a href="#第二个读者-写者解法-写者优先" class="headerlink" title="第二个读者-写者解法(写者优先)"></a>第二个读者-写者解法(写者优先)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   COPYRIGHT: CSAPP author RB</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* My thoughts</span></span><br><span class="line"><span class="comment">   For the second rw problem, we give the writers have higher priority</span></span><br><span class="line"><span class="comment">   than readers.That is when a writer arrives at some time, it will wait</span></span><br><span class="line"><span class="comment">   all the readers in critical section currently to finish their work,</span></span><br><span class="line"><span class="comment">   and at the same time, prevent any incoming readers entering their critical</span></span><br><span class="line"><span class="comment">   section ,by doing a P operation on r.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NITERS 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Sample code demonstrating reader-writers, using 2nd readers-writers</span></span><br><span class="line"><span class="comment"> * solution</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Create NITERS agents, numbered from 1 to NITERS.  Each agent is</span></span><br><span class="line"><span class="comment"> * randomly chosen to bea reader (probability 80%) or a writer</span></span><br><span class="line"><span class="comment"> * (probability 20%).  Writers assign their ID to the global value.</span></span><br><span class="line"><span class="comment"> * Readers read the global value.  Also insert random delays in agent</span></span><br><span class="line"><span class="comment"> * generation so that writers can catch up to the readers.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;csapp.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Uniform random number in [0.0,1.0] */</span></span><br><span class="line"><span class="type">static</span> <span class="type">double</span> <span class="title function_">uniform</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">double</span>) random() / RAND_MAX;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">choose_with_probability</span><span class="params">(<span class="type">double</span> prob)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> uniform() &lt;=  prob;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* $begin reader1 */</span></span><br><span class="line"><span class="comment">/* Global variables */</span></span><br><span class="line"><span class="type">int</span> readcnt, writecnt; <span class="comment">/* All initially = 0 */</span></span><br><span class="line"><span class="type">sem_t</span> rmutex, wmutex, r, w;     <span class="comment">/* All initially = 1 */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">readcnt = <span class="number">0</span>;</span><br><span class="line">writecnt = <span class="number">0</span>;</span><br><span class="line">Sem_init(&amp;rmutex, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">Sem_init(&amp;wmutex, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">Sem_init(&amp;w, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">Sem_init(&amp;r, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Get read access to data and read */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ireader</span><span class="params">(<span class="type">int</span> *buf)</span></span><br><span class="line">&#123;</span><br><span class="line">P(&amp;r);   <span class="comment">// Permission to attempt read</span></span><br><span class="line">P(&amp;rmutex);</span><br><span class="line">readcnt++;</span><br><span class="line"><span class="keyword">if</span> (readcnt == <span class="number">1</span>) <span class="comment">/* First in */</span></span><br><span class="line">P(&amp;w); <span class="comment">// Block writers</span></span><br><span class="line">V(&amp;rmutex);</span><br><span class="line">V(&amp;r);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Critical section */</span></span><br><span class="line"><span class="type">int</span> v = *buf;</span><br><span class="line"></span><br><span class="line">P(&amp;rmutex);</span><br><span class="line">readcnt--;</span><br><span class="line"><span class="keyword">if</span> (readcnt == <span class="number">0</span>) <span class="comment">/* Last out */</span></span><br><span class="line">V(&amp;w);</span><br><span class="line">V(&amp;rmutex);</span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Get write access to data and write */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">iwriter</span><span class="params">(<span class="type">int</span> *buf, <span class="type">int</span> v)</span></span><br><span class="line">&#123;</span><br><span class="line">P(&amp;wmutex);</span><br><span class="line">writecnt++;</span><br><span class="line"><span class="keyword">if</span> (writecnt == <span class="number">1</span>)</span><br><span class="line">P(&amp;r);  <span class="comment">// Block readers</span></span><br><span class="line">V(&amp;wmutex);</span><br><span class="line"></span><br><span class="line">P(&amp;w);</span><br><span class="line"><span class="comment">/* Critical section */</span></span><br><span class="line">*buf = v;</span><br><span class="line"><span class="comment">/* Writing happens  */</span></span><br><span class="line">V(&amp;w);</span><br><span class="line"></span><br><span class="line">P(&amp;wmutex);</span><br><span class="line">writecnt--;</span><br><span class="line"><span class="keyword">if</span> (writecnt == <span class="number">0</span>)</span><br><span class="line">V(&amp;r);  <span class="comment">// Enable readers</span></span><br><span class="line">V(&amp;wmutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> global_value = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">rthread</span><span class="params">(<span class="type">void</span> *vargp)</span> &#123;</span><br><span class="line"><span class="type">int</span> id = *(<span class="type">int</span> *) vargp;</span><br><span class="line">Free(vargp);</span><br><span class="line"><span class="type">int</span> v = ireader(&amp;global_value);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Reader %d read value %d\n&quot;</span>, id, v);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">wthread</span><span class="params">(<span class="type">void</span> *vargp)</span> &#123;</span><br><span class="line"><span class="type">int</span> id = *(<span class="type">int</span> *) vargp;</span><br><span class="line">Free(vargp);</span><br><span class="line">iwriter(&amp;global_value, id);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Writer %d wrote value %d\n&quot;</span>, id, id);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line"><span class="type">int</span> niters = NITERS;</span><br><span class="line"><span class="keyword">if</span> (argc &gt; <span class="number">1</span>)</span><br><span class="line">niters = atoi(argv[<span class="number">1</span>]);</span><br><span class="line"><span class="type">pthread_t</span> tid[niters];</span><br><span class="line">init();</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="keyword">for</span> (id = <span class="number">1</span>; id &lt;= niters; id++) &#123;</span><br><span class="line"><span class="type">bool</span> doread = choose_with_probability(<span class="number">0.8</span>);</span><br><span class="line"><span class="type">void</span> *vargp = Malloc(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">*(<span class="type">int</span> *) vargp = id;</span><br><span class="line">Pthread_create(&amp;tid[id<span class="number">-1</span>], <span class="literal">NULL</span>,</span><br><span class="line">doread ? rthread : wthread,</span><br><span class="line">vargp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (id = <span class="number">1</span>; id &lt;= niters; id++) &#123;</span><br><span class="line">Pthread_join(tid[id<span class="number">-1</span>], <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> concurrent </category>
          
          <category> 操作系统 </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
            <tag> concurrent </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Github action自动部署Hexo博客到Github pages</title>
      <link href="/en/2021/04/17/2021/Hexo-deploy-action/"/>
      <url>/en/2021/04/17/2021/Hexo-deploy-action/</url>
      
        <content type="html"><![CDATA[<p>hexo 博客如果是部署在 <code>github page</code> 上的话，可以通过 <code>Github action</code> 实现自动部署，免去手动生成上传的麻烦，每次修改将源码提交即可自动开始部署</p><p>示例Github action代码</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Controls when the action will run. </span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="comment"># Triggers the workflow on push or pull request events but only for the master branch</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">main</span> ]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">main</span> ]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Allows you to run this workflow manually from the Actions tab</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">A</span> <span class="string">job</span> <span class="string">to</span> <span class="string">deploy</span> <span class="string">blog.</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">submodules:</span> <span class="literal">true</span> <span class="comment"># Checkout private submodules(themes or something else).</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">apt</span> <span class="string">install</span> <span class="string">&amp;</span> <span class="string">upgrade</span> <span class="string">nodejs</span> <span class="string">&amp;</span> <span class="string">install</span> <span class="string">hexo</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">           node -v</span></span><br><span class="line"><span class="string">           echo &quot;-------------&quot;</span></span><br><span class="line"><span class="string">           curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -</span></span><br><span class="line"><span class="string">           sudo apt-get install -y nodejs</span></span><br><span class="line"><span class="string">           echo &quot;-------------&quot;</span></span><br><span class="line"><span class="string">           node -v</span></span><br><span class="line"><span class="string">           sudo npm install -g hexo hexo-cli</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">--save</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">              ls</span></span><br><span class="line"><span class="string">              npm install --save</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Git</span> <span class="string">Global</span> <span class="string">variable</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">              git config --global user.email &quot;Your email&quot;</span></span><br><span class="line"><span class="string">              git config --global user.name &quot;Your name&quot;</span></span><br><span class="line"><span class="string">              git config --global init.defaultBranch main</span></span><br><span class="line"><span class="string"></span>    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">deploy</span> <span class="string">key</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">          <span class="attr">ACTION_DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">          echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          chmod 700 ~/.ssh</span></span><br><span class="line"><span class="string">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string"></span>        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hexo</span> <span class="string">generate</span> <span class="string">&amp;</span> <span class="string">deploy</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">              ls</span></span><br><span class="line"><span class="string">              echo &quot;Generate  hexo site&quot;</span></span><br><span class="line"><span class="string">              hexo g</span></span><br><span class="line"><span class="string">              echo &quot;--------------&quot;</span></span><br><span class="line"><span class="string">              cd ..</span></span><br><span class="line"><span class="string">              pwd</span></span><br><span class="line"><span class="string">              echo &quot;Tree -L 2&quot;</span></span><br><span class="line"><span class="string">              tree -L 2</span></span><br><span class="line"><span class="string">              echo &quot;Deploy  hexo site&quot;</span></span><br><span class="line"><span class="string">              hexo d</span></span><br></pre></td></tr></table></figure><h2 id="GitHub-Deploy-key配置"><a href="#GitHub-Deploy-key配置" class="headerlink" title="GitHub Deploy key配置"></a>GitHub Deploy key配置</h2><ul><li>在Linux命令行输入</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;hexo&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p>生成RSA加密的ssh密钥对,位于当前目录下,<code>hexo.pub</code>为公钥,<code>hexo</code>为私钥</p></li><li><p>复制<code>hexo.pub</code>内容到<code>Settings</code> -&gt; <code>Deploy key</code>的新建项</p></li><li><p>在<code>Settings</code> -&gt; <code>Secret key</code>创建<code>HEXO_DEPLOY_KEY</code>,<code>value</code>为刚刚生成的<code>hexo</code>私钥内容</p></li><li><p>根据需要修改<code>deploy.yml</code>内容创建自动部署Hexo的Action</p></li></ul><p>这样在每次push到仓库的时候都能等1min左右完成Github page的自动生成部署</p><h2 id="需要注意的"><a href="#需要注意的" class="headerlink" title="需要注意的"></a>需要注意的</h2><ul><li><code>hexo</code> 依赖于<code>Nodejs</code>的<code>npm</code>包管理器,请现在本地参照<a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a>部署后，在Git项目中添加<code>.gitignore</code>忽略掉以下内容的提交,不上传<code>node_modules</code>等依赖文件，GithubAction会根据<code>npm install --save</code>生成的<code>package.json</code>自动安装配置相关npm包的依赖(即<code>package.json</code>包含npm包的依赖信息):</li></ul><p>.gitignore内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">package-lock.json</span><br></pre></td></tr></table></figure><p><strong>请在Private repo中提交源码，防止Token可能公开带来安全性问题</strong></p>]]></content>
      
      
      <categories>
          
          <category> github action </category>
          
          <category> 自动化部署 </category>
          
          <category> hexo </category>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github action </tag>
            
            <tag> 自动化部署 </tag>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>coc-vimrc</title>
      <link href="/en/2021/04/15/2021/coc-vimrc/"/>
      <url>/en/2021/04/15/2021/coc-vimrc/</url>
      
        <content type="html"><![CDATA[<p><strong>This is my coc-nvim configuration file document</strong></p><p>refer <strong><a href="https://github.com/zhzhzhy/coc-vimrc">Here</a></strong> in Github repository for more detail</p><h1 id="coc-vimrc"><a href="#coc-vimrc" class="headerlink" title="coc-vimrc"></a>coc-vimrc</h1><p><strong>Configuration of my coc-nvim &amp; Vimrc</strong></p><h2 id="Vim-Installation"><a href="#Vim-Installation" class="headerlink" title="Vim Installation"></a>Vim Installation</h2><h3 id="Installation-Guide"><a href="#Installation-Guide" class="headerlink" title="Installation Guide"></a><a href="https://www.vim.org/download.php">Installation Guide</a></h3><h3 id="Github-page"><a href="#Github-page" class="headerlink" title="Github page"></a><a href="https://github.com/vim/vim">Github page</a></h3><h2 id="Neovim-Installation-Optional"><a href="#Neovim-Installation-Optional" class="headerlink" title="Neovim Installation(Optional)"></a>Neovim Installation(Optional)</h2><p><a href="https://neovim.io/"><img src="/en/2021/04/15/2021/coc-vimrc/neovim-logo-300x87.png" alt="Neovim"></a></p><p>Neovim is a project that seeks to aggressively refactor Vim in order to:</p><ul><li>Simplify maintenance and encourage <a href="CONTRIBUTING.md">contributions</a></li><li>Split the work between multiple developers</li><li>Enable [advanced UIs] without modifications to the core</li><li>Maximize <a href="https://github.com/neovim/neovim/wiki/Plugin-UI-architecture">extensibility</a></li></ul><p>See the <a href="https://github.com/neovim/neovim/wiki/Introduction">Introduction</a> wiki page and [Roadmap]<br>for more information.</p><h3 id="Neovim-Installation-guide"><a href="#Neovim-Installation-guide" class="headerlink" title="Neovim Installation guide"></a>Neovim Installation guide</h3><ul><li><p><a href="https://neovim.io/">Neovim website</a></p></li><li><p><a href="https://github.com/neovim/neovim/wiki/Installing-Neovim">Installation Guide</a></p></li></ul><h2 id="coc-nvim-Installation"><a href="#coc-nvim-Installation" class="headerlink" title="coc-nvim Installation"></a>coc-nvim Installation</h2><ul><li>First Install <a href="https://github.com/neoclide/coc.nvim">coc-nvim</a><br>Don’t forget to install <code>nodejs</code> and <code>npm</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs npm</span><br></pre></td></tr></table></figure><p>OR</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S nodejs npm</span><br></pre></td></tr></table></figure><p>Note: If you are in China,change the <strong>npm source</strong>(Taobao registry) by following command</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="Plug-vim-Install"><a href="#Plug-vim-Install" class="headerlink" title="Plug.vim Install"></a><a href="https://github.com/junegunn/vim-plug">Plug.vim</a> Install</h2><p>A minimalist Vim plugin manager.</p><img src="https://raw.githubusercontent.com/junegunn/i/master/vim-plug/installer.gif" height="450"><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p><a href="https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim">Download plug.vim</a><br>and put it in the “autoload” directory.</p><h4 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h4><h5 id="Unix"><a href="#Unix" class="headerlink" title="Unix"></a>Unix</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fLo ~/.vim/autoload/plug.vim --create-dirs \</span><br><span class="line">    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure><p>You can automate the process by putting the command in your Vim configuration<br>file as suggested <a href="https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation">here</a>.</p><h5 id="Windows-PowerShell"><a href="#Windows-PowerShell" class="headerlink" title="Windows (PowerShell)"></a>Windows (PowerShell)</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">iwr</span> <span class="literal">-useb</span> https://raw.githubusercontent.com/junegunn/vim<span class="literal">-plug</span>/master/plug.vim |`</span><br><span class="line">    <span class="built_in">ni</span> <span class="variable">$HOME</span>/vimfiles/autoload/plug.vim <span class="literal">-Force</span></span><br></pre></td></tr></table></figure><h4 id="Neovim"><a href="#Neovim" class="headerlink" title="Neovim"></a>Neovim</h4><h5 id="Unix-Linux"><a href="#Unix-Linux" class="headerlink" title="Unix, Linux"></a>Unix, Linux</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&#x27;curl -fLo &quot;$&#123;XDG_DATA_HOME:-$HOME/.local/share&#125;&quot;/nvim/site/autoload/plug.vim --create-dirs \</span></span><br><span class="line"><span class="string">       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="Linux-Flatpak"><a href="#Linux-Flatpak" class="headerlink" title="Linux (Flatpak)"></a>Linux (Flatpak)</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fLo ~/.var/app/io.neovim.nvim/data/nvim/site/autoload/plug.vim \</span><br><span class="line">    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure><h5 id="Windows-PowerShell-1"><a href="#Windows-PowerShell-1" class="headerlink" title="Windows (PowerShell)"></a>Windows (PowerShell)</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">iwr</span> <span class="literal">-useb</span> https://raw.githubusercontent.com/junegunn/vim<span class="literal">-plug</span>/master/plug.vim |`</span><br><span class="line">    <span class="built_in">ni</span> <span class="string">&quot;<span class="variable">$</span>(@(<span class="variable">$env:XDG_DATA_HOME</span>, <span class="variable">$env:LOCALAPPDATA</span>)[<span class="variable">$null</span> -eq <span class="variable">$env:XDG_DATA_HOME</span>])/nvim-data/site/autoload/plug.vim&quot;</span> <span class="literal">-Force</span></span><br></pre></td></tr></table></figure><h2 id="Vim-amp-Neovim-configuration-How-to-use-these-scripts"><a href="#Vim-amp-Neovim-configuration-How-to-use-these-scripts" class="headerlink" title="Vim &amp; Neovim configuration: How to use these scripts"></a>Vim &amp; Neovim configuration: How to use these scripts</h2><p><strong>Notice</strong>: These config files suit my own needs,Please <strong>DO NOT</strong> just copy this configuration folder without really understanding about it! Please, at least, read this README file!</p><h3 id="For-Vim"><a href="#For-Vim" class="headerlink" title="For Vim"></a>For Vim</h3><ol><li><p>After you install <code>Plug.vim</code>,copy <code>.vimrc</code> and <code>coc-settings.json</code> Scripts to <code>$HOME/</code> &amp; <code>$HOME/.vim/</code></p></li><li><p>Reopen <code>Vim</code></p></li><li><p>Wait Coc Extension installing finished</p></li><li><p>Execute <code>:PlugInstall</code> to Finish VIM Plugin install</p></li><li><p>Configure the rest components</p></li></ol><h3 id="For-Neovim"><a href="#For-Neovim" class="headerlink" title="For Neovim"></a>For Neovim</h3><ol><li>After you install <code>Plug.vim</code>,copy <code>init.vim</code> to <code>$HOME/.config/nvim/</code></li><li>Reopen <code>Neovim</code></li></ol><h2 id="Neovim-Transitioning-from-Vim-nvim-from-vim"><a href="#Neovim-Transitioning-from-Vim-nvim-from-vim" class="headerlink" title="Neovim: Transitioning from Vim (nvim-from-vim)"></a>Neovim: Transitioning from Vim (<em>nvim-from-vim</em>)</h2><p><em>nvim-from-vim</em></p><ol><li>To start the transition, create your <a href="https://neovim.io/doc/user/init.html">init.vim</a> (user <a href="https://neovim.io/doc/user/starting.html#config">config</a>) file:</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">call</span> <span class="built_in">mkdir</span>(stdpath(<span class="string">&#x27;config&#x27;</span>), <span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">:<span class="keyword">exe</span> <span class="string">&#x27;edit &#x27;</span>.stdpath(<span class="string">&#x27;config&#x27;</span>).<span class="string">&#x27;/init.vim&#x27;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Add these contents to the file:</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> runtimepath^=~/.<span class="keyword">vim</span> runtimepath+=~/.<span class="keyword">vim</span>/after</span><br><span class="line"><span class="keyword">let</span> &amp;packpath = &amp;runtimepath</span><br><span class="line"><span class="keyword">source</span> ~/.vimrc</span><br></pre></td></tr></table></figure><ol start="3"><li>Restart Nvim, your existing Vim <a href="https://neovim.io/doc/user/starting.html#config">config</a> will be loaded.</li></ol><p>See |<a href="https://neovim.io/doc/user/provider.html#provider-python">provider-python</a>| and |<a href="https://neovim.io/doc/user/provider.html#provider-clipboard">provider-clipboard</a>| for additional software you<br>might need to use some features.</p><p>Your Vim configuration might not be entirely Nvim-compatible.<br>See |<a href="https://neovim.io/doc/user/vim_diff.html#vim-differences">vim-differences</a>| for the full <a href="https://neovim.io/doc/user/eval.html#list">list</a> of changes.</p><p>The |<a href="https://neovim.io/doc/user/vim_diff.html#'ttymouse'">‘ttymouse’</a>| option, for example, was removed from Nvim (mouse support<br>should work without <a href="https://neovim.io/doc/user/motion.html#it">it</a>). If you use the same |<a href="https://neovim.io/doc/user/starting.html#vimrc">vimrc</a>| for Vim and Nvim,<br>consider guarding |<a href="https://neovim.io/doc/user/vim_diff.html#'ttymouse'">‘ttymouse’</a>| in your configuration like so:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> !has(<span class="string">&#x27;nvim&#x27;</span>)</span><br><span class="line">    <span class="keyword">set</span> ttymouse=xterm2</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure><p>Conversely, if you have Nvim specific configuration items, you could do<br>this:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">has</span>(<span class="string">&#x27;nvim&#x27;</span>)</span><br><span class="line">    tnoremap <span class="symbol">&lt;Esc&gt;</span> &lt;C-\&gt;<span class="symbol">&lt;C-n&gt;</span></span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure><p>For a more granular approach use YXXYexists()|:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">exists</span>(<span class="string">&#x27;:tnoremap&#x27;</span>)</span><br><span class="line">    tnoremap <span class="symbol">&lt;Esc&gt;</span> &lt;C-\&gt;<span class="symbol">&lt;C-n&gt;</span></span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure><p>Now you should be able to explore Nvim more comfortably. Check |<a href="https://neovim.io/doc/user/vim_diff.html#nvim-features">nvim-features</a>| for more information.</p><h2 id="Plugin-explanation-amp-key-mapping"><a href="#Plugin-explanation-amp-key-mapping" class="headerlink" title="Plugin explanation &amp; key mapping"></a>Plugin explanation &amp; key mapping</h2><h3 id="vim-plugins"><a href="#vim-plugins" class="headerlink" title="vim plugins"></a>vim plugins</h3><h4 id="coc-nvim"><a href="#coc-nvim" class="headerlink" title="coc.nvim"></a><a href="https://github.com/neoclide/coc.nvim">coc.nvim</a></h4><p>Follow <a href="#installation">Installation</a></p><h4 id="kotlin-vim"><a href="#kotlin-vim" class="headerlink" title="kotlin-vim"></a><a href="https://github.com/udalov/kotlin-vim">kotlin-vim</a></h4><h4 id="vim-visual-multi"><a href="#vim-visual-multi" class="headerlink" title="vim-visual-multi"></a><a href="https://github.com/mg979/vim-visual-multi">vim-visual-multi</a></h4><table><thead><tr><th align="center">Shortcut</th><th align="center">Action</th></tr></thead><tbody><tr><td align="center"><code>Ctrl</code>+<code>n</code></td><td align="center"><strong>Select next key (multiple cursors)</strong></td></tr><tr><td align="center"><code>q</code></td><td align="center"><strong>Deselect the current keys (multiple cursors)</strong></td></tr><tr><td align="center"><code>N</code></td><td align="center">Select the previous key</td></tr><tr><td align="center"><code>n</code></td><td align="center">Select the next key</td></tr><tr><td align="center"><code>Esc</code></td><td align="center">Quit mutiple cursors</td></tr></tbody></table><p>To minimize chances for conflicts, a leader that is specific to VM is defined. The default is <code>\\</code> (two backslashes), but you can change it by setting:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let g:VM_leader = &#123;your VM leader&#125;</span><br></pre></td></tr></table></figure><h5 id="Basic-usage"><a href="#Basic-usage" class="headerlink" title="Basic usage:"></a>Basic usage:</h5><ul><li>select words with <kbd>Ctrl-N</kbd> (like <code>Ctrl-d</code> in Sublime Text/VS Code)</li><li>create cursors vertically with <kbd>Ctrl-Down</kbd>/<kbd>Ctrl-Up</kbd></li><li>select one character at a time with <kbd>Shift-Arrows</kbd></li><li>press <kbd>n</kbd>/<kbd>N</kbd> to get next/previous occurrence</li><li>press <kbd>[</kbd>/<kbd>]</kbd> to select next/previous cursor</li><li>press <kbd>q</kbd> to skip current and get next occurrence</li><li>press <kbd>Q</kbd> to remove current cursor/selection</li><li>start insert mode with <kbd>i</kbd>,<kbd>a</kbd>,<kbd>I</kbd>,<kbd>A</kbd></li></ul><p>Two main modes:</p><ul><li>in <em>cursor mode</em> commands work as they would in normal mode</li><li>in <em>extend mode</em> commands work as they would in visual mode</li><li>press <kbd>Tab</kbd> to switch between «cursor» and «extend» mode</li></ul><p>Most vim commands work as expected (motions, <kbd>r</kbd> to replace characters, <kbd>~</kbd> to change case, etc). Additionally you can:</p><ul><li>run macros/ex/normal commands at cursors</li><li>align cursors</li><li>transpose selections</li><li>add patterns with regex, or from visual mode</li></ul><p>And more… of course, you can enter insert mode and autocomplete will work.</p><h5 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h5><pre><code>:help visual-multi</code></pre><p>For some specific topic it’s often:</p><pre><code>:help vm-some-topic</code></pre><h5 id="Wiki"><a href="#Wiki" class="headerlink" title="Wiki"></a><a href="https://github.com/mg979/vim-visual-multi/wiki">Wiki</a></h5><p>The wiki was the first documentation for the plugin, but many pictures are<br>outdated and contain wrong mappings. Still, you can take a look.</p><p>You could read at least the <a href="https://github.com/mg979/vim-visual-multi/wiki/Quick-start">Quick Start</a>.</p><p> Quick refer the <a href="https://github.com/mg979/vim-visual-multi/wiki/Mappings">Key mapping</a></p><p>Insert mode with autocomplete, alignment (mappings in pic have changed, don’t trust them)</p><p><img src="/en/2021/04/15/2021/coc-vimrc/u5pPY5W.gif" alt="Imgur"></p><hr><p>Undo/Redo edits and selections</p><p><img src="/en/2021/04/15/2021/coc-vimrc/gwFfUxq.gif" alt="Imgur"></p><hr><p>Alternate cursor/extend mode, motions (even %), reverse direction (as in visual mode) and extend from the back. At any time you can switch from extend to cursor mode and viceversa.</p><p><img src="/en/2021/04/15/2021/coc-vimrc/ggQr1Ve.gif" alt="Imgur"></p><hr><p>Select inside/around brackets/quotes/etc:</p><p><img src="/en/2021/04/15/2021/coc-vimrc/GAXQLao.gif" alt="Imgur"></p><hr><p>Select operator, here shown with ‘wellle/targets.vim’ plugin: sib, sia, saa + selection shift</p><p><img src="/en/2021/04/15/2021/coc-vimrc/yM3Fele.gif" alt="Imgur"></p><hr><p>Synched column transposition</p><p><img src="/en/2021/04/15/2021/coc-vimrc/9JDaLBi.gif" alt="Imgur"></p><hr><p>Unsynched transposition (cycle all regions, also in different lines)</p><p><img src="/en/2021/04/15/2021/coc-vimrc/UQOCxyf.gif" alt="Imgur"></p><hr><p>Shift regions left and right (M-S-&lt;&gt;)</p><p><img src="/en/2021/04/15/2021/coc-vimrc/Q7EF8YI.gif" alt="Imgur"></p><hr><p>Find words under cursor, add new words (patterns stack), navigate regions, skip them, add regions with regex.</p><p><img src="/en/2021/04/15/2021/coc-vimrc/zWtelNO.gif" alt="Imgur"></p><h4 id="undotree"><a href="#undotree" class="headerlink" title="undotree"></a><a href="https://github.com/mbbill/undotree">undotree</a></h4><p><img src="/en/2021/04/15/2021/coc-vimrc/undotree_new.png"></p><h5 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h5><table><thead><tr><th align="center">Shortcut</th><th align="center">Action</th></tr></thead><tbody><tr><td align="center"><code>:UndotreeToggle</code> OR <code>F5</code></td><td align="center">toggle the undo-tree panel.</td></tr><tr><td align="center"><code>:redo</code> OR <code>&lt;ctrl-r&gt;</code></td><td align="center">restore</td></tr><tr><td align="center"><code>[ number ]</code></td><td align="center">marks the most recent change</td></tr></tbody></table><ol><li>Use <code>:UndotreeToggle</code> to toggle the undo-tree panel. You may want to map this command to whatever hotkey by adding the following line to your vimrc, take <code>F5</code> for example.<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nnoremap &lt;F5&gt; :UndotreeToggle&lt;CR&gt;</span><br></pre></td></tr></table></figure></li><li>Markers<ul><li>Every change has a sequence number and it is displayed before timestamps.</li><li>The current state is marked as <code>&gt; number &lt;</code>.</li><li>The next state which will be restored by <code>:redo`:redo` or </code><ctrl-r><code>&lt;ctrl-r&gt;</code> is marked as <code>&#123; number &#125;</code>.</li><li>The <code>[ number ]</code> marks the most recent change.</li><li>The undo history is sorted by timestamps.</li><li>Saved changes are marked as <code>s</code> and the big <code>S</code> indicates the most recent saved change.</li></ul></li><li>Press <code>?</code> in undotree window for quick help.</li><li>Persistent undo<ul><li>Usually I would like to store the undo files in a seperate place like below.</li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if has(&quot;persistent_undo&quot;)</span><br><span class="line">   let target_path = expand(&#x27;~/.undodir&#x27;)</span><br><span class="line"></span><br><span class="line">    &quot; create the directory and any parent directories</span><br><span class="line">    &quot; if the location does not exist.</span><br><span class="line">    if !isdirectory(target_path)</span><br><span class="line">        call mkdir(target_path, &quot;p&quot;, 0700)</span><br><span class="line">    endif</span><br><span class="line"></span><br><span class="line">    let &amp;undodir=target_path</span><br><span class="line">    set undofile</span><br><span class="line">endif</span><br></pre></td></tr></table></figure><h4 id="vim-easy-align"><a href="#vim-easy-align" class="headerlink" title="vim-easy-align"></a><a href="https://github.com/junegunn/vim-easy-align">vim-easy-align</a></h4><p><strong>A simple, easy-to-use Vim alignment plugin.</strong></p><p><img src="/en/2021/04/15/2021/coc-vimrc/equals.gif"></p><p><code>ga</code> + <strong>symbol</strong> in normal or visual mode to align text based on <strong>symbol</strong></p><ul><li>with the following lines of text,</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apple   =red</span><br><span class="line">grass+=green</span><br><span class="line">sky-=   blue</span><br></pre></td></tr></table></figure><p>try these commands:</p><ul><li><code>vipga=</code><ul><li><code>v</code>isual-select <code>i</code>nner <code>p</code>aragraph</li><li>Start EasyAlign command (<code>ga</code>)</li><li>Align around <code>=</code></li></ul></li><li><code>gaip=</code><ul><li>Start EasyAlign command (<code>ga</code>) for <code>i</code>nner <code>p</code>aragraph</li><li>Align around <code>=</code></li></ul></li></ul><h5 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h5><h6 id="Using-predefined-alignment-rules"><a href="#Using-predefined-alignment-rules" class="headerlink" title="Using predefined alignment rules"></a>Using predefined alignment rules</h6><p>An <em>alignment rule</em> is a predefined set of options for common alignment tasks,<br>which is identified by a single character, such as <code>&lt;Space&gt;</code>, <code>=</code>, <code>:</code>, <code>.</code>,<br><code>|</code>, <code>&amp;</code>, <code>#</code>, and <code>,</code>.</p><h6 id=""><a href="#" class="headerlink" title="="></a><code>=</code></h6><p><img src="/en/2021/04/15/2021/coc-vimrc/equals.gif"></p><ul><li><code>=</code> Around the 1st occurrences</li><li><code>2=</code> Around the 2nd occurrences</li><li><code>*=</code> Around all occurrences</li><li><code>**=</code> Left/Right alternating alignment around all occurrences</li><li><code>&lt;Enter&gt;</code> Switching between left/right/center alignment modes</li></ul><h6 id="lt-Space-gt"><a href="#lt-Space-gt" class="headerlink" title="&lt;Space&gt;"></a><code>&lt;Space&gt;</code></h6><p><img src="/en/2021/04/15/2021/coc-vimrc/spaces.gif"></p><ul><li><code>&lt;Space&gt;</code> Around the 1st occurrences of whitespaces</li><li><code>2&lt;Space&gt;</code> Around the 2nd occurrences</li><li><code>-&lt;Space&gt;</code> Around the last occurrences</li><li><code>&lt;Enter&gt;&lt;Enter&gt;2&lt;Space&gt;</code> Center-alignment around the 2nd occurrences</li></ul><h6 id="-1"><a href="#-1" class="headerlink" title=","></a><code>,</code></h6><p><img src="/en/2021/04/15/2021/coc-vimrc/commas.gif"></p><ul><li>The predefined comma-rule places a comma right next to the preceding token<br>without margin (<code>&#123;&#39;stick_to_left&#39;: 1, &#39;left_margin&#39;: 0&#125;</code>)</li><li>You can change it with <code>&lt;Right&gt;</code> arrow</li></ul><h6 id="Using-regular-expression"><a href="#Using-regular-expression" class="headerlink" title="Using regular expression"></a>Using regular expression</h6><p><img src="/en/2021/04/15/2021/coc-vimrc/regex.gif"></p><p>You can use an arbitrary regular expression by</p><ul><li>pressing <code>&lt;Ctrl-X&gt;</code> in interactive mode</li><li>or using <code>:EasyAlign /REGEX/</code> command in visual mode or in normal mode with<br>a range (e.g. <code>:%</code>)</li></ul><p>Different ways to start</p><p><img src="/en/2021/04/15/2021/coc-vimrc/modes.gif"></p><p>This demo shows how you can start interactive mode with visual selection or use<br>non-interactive <code>:EasyAlign</code> command.</p><h6 id="Aligning-table-cells"><a href="#Aligning-table-cells" class="headerlink" title="Aligning table cells"></a>Aligning table cells</h6><p><img src="/en/2021/04/15/2021/coc-vimrc/tables.gif"></p><p>Check out various alignment options and “live interactive mode”.</p><h6 id="Syntax-aware-alignment"><a href="#Syntax-aware-alignment" class="headerlink" title="Syntax-aware alignment"></a>Syntax-aware alignment</h6><p><img src="/en/2021/04/15/2021/coc-vimrc/yaml.gif"></p><p>Delimiters in strings and comments are ignored by default.</p><h6 id="Using-blockwise-visual-mode"><a href="#Using-blockwise-visual-mode" class="headerlink" title="Using blockwise-visual mode"></a>Using blockwise-visual mode</h6><p><img src="/en/2021/04/15/2021/coc-vimrc/blockwise-visual.gif"></p><p><strong>A simple, easy-to-use Vim alignment plugin.</strong></p><p><img src="/en/2021/04/15/2021/coc-vimrc/equals.gif"></p><p><code>ga</code> + <strong>symbol</strong> in normal or visual mode to align text based on <strong>symbol</strong></p><ul><li>with the following lines of text,</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apple   =red</span><br><span class="line">grass+=green</span><br><span class="line">sky-=   blue</span><br></pre></td></tr></table></figure><p>try these commands:</p><ul><li><code>vipga=</code><ul><li><code>v</code>isual-select <code>i</code>nner <code>p</code>aragraph</li><li>Start EasyAlign command (<code>ga</code>)</li><li>Align around <code>=</code></li></ul></li><li><code>gaip=</code><ul><li>Start EasyAlign command (<code>ga</code>) for <code>i</code>nner <code>p</code>aragraph</li><li>Align around <code>=</code></li></ul></li></ul><h5 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h5><h6 id="Using-predefined-alignment-rules-1"><a href="#Using-predefined-alignment-rules-1" class="headerlink" title="Using predefined alignment rules"></a>Using predefined alignment rules</h6><p>An <em>alignment rule</em> is a predefined set of options for common alignment tasks,<br>which is identified by a single character, such as <code>&lt;Space&gt;</code>, <code>=</code>, <code>:</code>, <code>.</code>,<br><code>|</code>, <code>&amp;</code>, <code>#</code>, and <code>,</code>.</p><h6 id="-2"><a href="#-2" class="headerlink" title="="></a><code>=</code></h6><p><img src="/en/2021/04/15/2021/coc-vimrc/equals.gif"></p><ul><li><code>=</code> Around the 1st occurrences</li><li><code>2=</code> Around the 2nd occurrences</li><li><code>*=</code> Around all occurrences</li><li><code>**=</code> Left/Right alternating alignment around all occurrences</li><li><code>&lt;Enter&gt;</code> Switching between left/right/center alignment modes</li></ul><h6 id="lt-Space-gt-1"><a href="#lt-Space-gt-1" class="headerlink" title="&lt;Space&gt;"></a><code>&lt;Space&gt;</code></h6><p><img src="/en/2021/04/15/2021/coc-vimrc/spaces.gif"></p><ul><li><code>&lt;Space&gt;</code> Around the 1st occurrences of whitespaces</li><li><code>2&lt;Space&gt;</code> Around the 2nd occurrences</li><li><code>-&lt;Space&gt;</code> Around the last occurrences</li><li><code>&lt;Enter&gt;&lt;Enter&gt;2&lt;Space&gt;</code> Center-alignment around the 2nd occurrences</li></ul><h6 id="-3"><a href="#-3" class="headerlink" title=","></a><code>,</code></h6><p><img src="/en/2021/04/15/2021/coc-vimrc/commas.gif"></p><ul><li>The predefined comma-rule places a comma right next to the preceding token<br>without margin (<code>&#123;&#39;stick_to_left&#39;: 1, &#39;left_margin&#39;: 0&#125;</code>)</li><li>You can change it with <code>&lt;Right&gt;</code> arrow</li></ul><h6 id="Using-regular-expression-1"><a href="#Using-regular-expression-1" class="headerlink" title="Using regular expression"></a>Using regular expression</h6><p><img src="/en/2021/04/15/2021/coc-vimrc/regex.gif"></p><p>You can use an arbitrary regular expression by</p><ul><li>pressing <code>&lt;Ctrl-X&gt;</code> in interactive mode</li><li>or using <code>:EasyAlign /REGEX/</code> command in visual mode or in normal mode with<br>a range (e.g. <code>:%</code>)</li></ul><p>Different ways to start</p><p><img src="/en/2021/04/15/2021/coc-vimrc/modes.gif"></p><p>This demo shows how you can start interactive mode with visual selection or use<br>non-interactive <code>:EasyAlign</code> command.</p><h6 id="Aligning-table-cells-1"><a href="#Aligning-table-cells-1" class="headerlink" title="Aligning table cells"></a>Aligning table cells</h6><p><img src="/en/2021/04/15/2021/coc-vimrc/tables.gif"></p><p>Check out various alignment options and “live interactive mode”.</p><h6 id="Syntax-aware-alignment-1"><a href="#Syntax-aware-alignment-1" class="headerlink" title="Syntax-aware alignment"></a>Syntax-aware alignment</h6><p><img src="/en/2021/04/15/2021/coc-vimrc/yaml.gif"></p><p>Delimiters in strings and comments are ignored by default.</p><h6 id="Using-blockwise-visual-mode-1"><a href="#Using-blockwise-visual-mode-1" class="headerlink" title="Using blockwise-visual mode"></a>Using blockwise-visual mode</h6><p><img src="/en/2021/04/15/2021/coc-vimrc/blockwise-visual.gif"></p><p>You can limit the scope with blockwise-visual mode.</p><h4 id="calendar-vim"><a href="#calendar-vim" class="headerlink" title="calendar.vim"></a><a href="https://github.com/itchyny/calendar.vim">calendar.vim</a></h4><p><img src="/en/2021/04/15/2021/coc-vimrc/image.png" alt="calendar.vim"></p><p>Press E key to view the event list, and T key to view the task list.<br>Also, press ? key to view a quick help.</p><p><img src="/en/2021/04/15/2021/coc-vimrc/views.png" alt="calendar.vim"></p><h5 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h5><pre><code>:Calendar</code></pre><p><img src="/en/2021/04/15/2021/coc-vimrc/image0.png" alt="calendar.vim"></p><pre><code>:Calendar 2000 1 1</code></pre><p><img src="/en/2021/04/15/2021/coc-vimrc/image1.png" alt="calendar.vim"></p><pre><code>:Calendar -view=year</code></pre><p><img src="/en/2021/04/15/2021/coc-vimrc/image2.png" alt="calendar.vim"></p><pre><code>:Calendar -view=year -split=vertical -width=27</code></pre><p><img src="/en/2021/04/15/2021/coc-vimrc/image3.png" alt="calendar.vim"></p><pre><code>:Calendar -view=year -split=horizontal -position=below -height=12</code></pre><p><img src="/en/2021/04/15/2021/coc-vimrc/image4.png" alt="calendar.vim"></p><pre><code>:Calendar -first_day=monday</code></pre><p><img src="/en/2021/04/15/2021/coc-vimrc/image5.png" alt="calendar.vim"></p><pre><code>:Calendar -view=clock</code></pre><p><img src="/en/2021/04/15/2021/coc-vimrc/image6.png" alt="calendar.vim"></p><p>You can switch between views with &lt; and &gt; keys.</p><h4 id="vim-autoformat"><a href="#vim-autoformat" class="headerlink" title="vim-autoformat"></a><a href="https://github.com/Chiel92/vim-autoformat">vim-autoformat</a></h4><p>For convenience it is recommended that you assign a key for this, like so:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;F3&gt;</span> :Autoformat<span class="symbol">&lt;CR&gt;</span></span><br></pre></td></tr></table></figure><p>Basic usage: <code>:Autoformat</code> OR <code>F3</code></p><h4 id="vim-gitgutter"><a href="#vim-gitgutter" class="headerlink" title="vim-gitgutter"></a><a href="https://github.com/airblade/vim-gitgutter">vim-gitgutter</a></h4><p>A Vim plugin which shows a git diff in the sign column. It shows which lines have been added, modified, or removed. You can also preview, stage, and undo individual hunks; and stage partial hunks. The plugin also provides a hunk text object.<br><img src="/en/screenshot.png?raw=true"></p><p>In the screenshot above you can see:</p><ul><li>Lines 183-184 are new.</li><li>Lines 186-187 have been modified.</li><li>The preview for the modified lines highlights changed regions within the line.</li></ul><h4 id="vim-surround"><a href="#vim-surround" class="headerlink" title="vim-surround"></a><a href="https://github.com/tpope/vim-surround">vim-surround</a></h4><p><img src="/en/2021/04/15/2021/coc-vimrc/surround_vim.gif"></p><h5 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h5><p>Press <code>cs&quot;&#39;</code> inside</p><pre><code>&quot;Hello world!&quot;</code></pre><p>to change it to</p><pre><code>&#39;Hello world!&#39;</code></pre><p>Now press <code>cs&#39;&lt;q&gt;</code> to change it to</p><pre><code>&lt;q&gt;Hello world!&lt;/q&gt;</code></pre><p>To go full circle, press <code>cst&quot;</code> to get</p><pre><code>&quot;Hello world!&quot;</code></pre><p>To remove the delimiters entirely, press <code>ds&quot;</code>.</p><pre><code>Hello world!</code></pre><p>Now with the cursor on “Hello”, press <code>ysiw]</code> (<code>iw</code> is a text object).</p><pre><code>[Hello] world!</code></pre><p>Let’s make that braces and add some space (use <code>&#125;</code> instead of <code>&#123;</code> for no<br>space): <code>cs]&#123;</code></p><pre><code>&#123; Hello &#125; world!</code></pre><p>Now wrap the entire line in parentheses with <code>yssb</code> or <code>yss)</code>.</p><pre><code>(&#123; Hello &#125; world!)</code></pre><p>Revert to the original text: <code>ds&#123;ds)</code></p><pre><code>Hello world!</code></pre><p>Emphasize hello: <code>ysiw&lt;em&gt;</code></p><pre><code>&lt;em&gt;Hello&lt;/em&gt; world!</code></pre><p>Finally, let’s try out visual mode. Press a capital V (for linewise<br>visual mode) followed by <code>S&lt;p class=&quot;important&quot;&gt;</code>.</p><pre><code>&lt;p class=&quot;important&quot;&gt;  &lt;em&gt;Hello&lt;/em&gt; world!&lt;/p&gt;</code></pre><h4 id="vim-markdown-toc"><a href="#vim-markdown-toc" class="headerlink" title="vim-markdown-toc"></a><a href="https://github.com/mzlogin/vim-markdown-toc">vim-markdown-toc</a></h4><p><img src="/en/2021/04/15/2021/coc-vimrc/english.gif" alt="gif"></p><ul><li><p>Generate table of contents for Markdown files.</p><p>Supported Markdown parsers:</p><ul><li><input checked="" disabled="" type="checkbox"> GFM (GitHub Flavored Markdown)</li><li><input checked="" disabled="" type="checkbox"> GitLab</li><li><input checked="" disabled="" type="checkbox"> Redcarpet</li></ul></li><li><p>Update existing table of contents.</p></li><li><p>Auto update existing table of contents on save.</p></li></ul><ol><li><p><code>:GenTocGFM</code></p><p> Generate table of contents in <a href="https://github.github.com/gfm/">GFM</a> link style.</p><p> This command is suitable for Markdown files in GitHub repositories, like <code>README.md</code>, and Markdown files for GitBook.</p></li><li><p><code>:GenTocRedcarpet</code></p><p> Generate table of contents in <a href="https://github.com/vmg/redcarpet">Redcarpet</a> link style.</p><p> This command is suitable for Jekyll or anywhere else use Redcarpet as its Markdown parser.</p></li><li><p><code>:GenTocGitLab</code></p><p> Generate table of contents in <a href="https://docs.gitlab.com/ee/user/markdown.html">GitLab</a> link style.</p><p> This command is suitable for GitLab repository and wiki.</p></li><li><p><code>:GenTocMarked</code></p><p> Generate table of contents for <a href="https://github.com/iamcco/markdown-preview.vim">iamcco/markdown-preview.vim</a> which use <a href="https://github.com/markedjs/marked">Marked</a> markdown parser.</p></li></ol><p>You can view <a href="http://mazhuang.org/2015/12/05/diff-between-gfm-and-redcarpet/">here</a> to know differences between <em>GFM</em> and <em>Redcarpet</em> style toc links.</p><h5 id="Update-existing-table-of-contents"><a href="#Update-existing-table-of-contents" class="headerlink" title="Update existing table of contents"></a>Update existing table of contents</h5><p>Generally you don’t need to do this manually, existing table of contents will auto update on save by default.</p><p>The <code>:UpdateToc</code> command, which is designed to update toc manually, can only work when <code>g:vmt_auto_update_on_save</code> turned off, and keep insert fence.</p><h5 id="Remove-table-of-contents"><a href="#Remove-table-of-contents" class="headerlink" title="Remove table of contents"></a>Remove table of contents</h5><p><code>:RemoveToc</code> command will do this for you, just remember keep insert fence option by default.</p><h4 id="vim-airline"><a href="#vim-airline" class="headerlink" title="vim-airline"></a><a href="https://github.com/vim-airline/vim-airline">vim-airline</a></h4><p>Lean &amp; mean status/tabline for vim that’s light as air.</p><p><img src="/en/2021/04/15/2021/coc-vimrc/demo.gif" alt="img"></p><p>When the plugin is correctly loaded, there will be a nice statusline at the<br>bottom of each vim window.</p><h5 id="Smarter-tab-line"><a href="#Smarter-tab-line" class="headerlink" title="Smarter tab line"></a>Smarter tab line</h5><p>Automatically displays all buffers when there’s only one tab open.</p><p><img src="/en/2021/04/15/2021/coc-vimrc/44c292a0-1495-11e3-9ce6-dcada3f1c536.gif" alt="tabline"></p><p>This is disabled by default; add the following to your vimrc to enable the extension:</p><pre><code>let g:airline#extensions#tabline#enabled = 1</code></pre><h5 id="vim-airline-themes"><a href="#vim-airline-themes" class="headerlink" title="vim-airline-themes"></a><a href="https://github.com/vim-airline/vim-airline-themes">vim-airline-themes</a></h5><h4 id="Indent-Guides"><a href="#Indent-Guides" class="headerlink" title="Indent Guides"></a><a href="https://github.com/nathanaelkane/vim-indent-guides">Indent Guides</a></h4><p>Indent Guides is a plugin for visually displaying indent levels in Vim.</p><img src="http://i.imgur.com/ONgoj.png" width="448" height="448" alt="" /><h5 id="Usage-1"><a href="#Usage-1" class="headerlink" title="Usage"></a>Usage</h5><p>The default mapping to toggle the plugin is <code>&lt;Leader&gt;ig</code>.</p><p>You can also use the following commands inside Vim:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:IndentGuidesEnable</span><br><span class="line">:IndentGuidesDisable</span><br><span class="line">:IndentGuidesToggle</span><br></pre></td></tr></table></figure><p>If you would like to have indent guides enabled by default, you can add the following to your <code>~/.vimrc</code>:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">g:indent_guides_enable_on_vim_startup</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="coc-nvim-extensions"><a href="#coc-nvim-extensions" class="headerlink" title="coc-nvim extensions"></a>coc-nvim extensions</h3><h4 id="Language-servers"><a href="#Language-servers" class="headerlink" title="Language servers"></a>Language servers</h4><h5 id="coc-clangd"><a href="#coc-clangd" class="headerlink" title="coc-clangd"></a><a href="https://github.com/clangd/coc-clangd">coc-clangd</a></h5><h5 id="coc-css"><a href="#coc-css" class="headerlink" title="coc-css"></a><a href="https://github.com/neoclide/coc-css">coc-css</a></h5><h5 id="coc-flutter"><a href="#coc-flutter" class="headerlink" title="coc-flutter"></a><a href="https://github.com/iamcco/coc-flutter">coc-flutter</a></h5><h5 id="coc-html"><a href="#coc-html" class="headerlink" title="coc-html"></a><a href="https://github.com/neoclide/coc-html">coc-html</a></h5><h5 id="coc-json"><a href="#coc-json" class="headerlink" title="coc-json"></a><a href="https://github.com/neoclide/coc-json">coc-json</a></h5><h5 id="coc-python"><a href="#coc-python" class="headerlink" title="coc-python"></a><a href="https://github.com/neoclide/coc-python">coc-python</a></h5><h5 id="coc-tsserver"><a href="#coc-tsserver" class="headerlink" title="coc-tsserver"></a><a href="https://github.com/neoclide/coc-tsserver">coc-tsserver</a></h5><h5 id="coc-vimlsp"><a href="#coc-vimlsp" class="headerlink" title="coc-vimlsp"></a><a href="https://github.com/iamcco/coc-vimlsp">coc-vimlsp</a></h5><h5 id="coc-yaml"><a href="#coc-yaml" class="headerlink" title="coc-yaml"></a><a href="https://github.com/neoclide/coc-yaml">coc-yaml</a></h5><h4 id="Other-coc-extensions"><a href="#Other-coc-extensions" class="headerlink" title="Other coc extensions"></a>Other coc extensions</h4><h5 id="coc-marketplace"><a href="#coc-marketplace" class="headerlink" title="coc-marketplace"></a><a href="https://github.com/fannheyward/coc-marketplace">coc-marketplace</a></h5><p><a href="https://github.com/neoclide/coc.nvim">coc.nvim</a>  extensions marketplace.</p><ul><li>search <code>keywords:coc.nvim</code> from npmjs.com, display extensions in <code>coc-lists</code></li><li>extension name starts with <code>√</code> means installed already, with an <code>uninstall</code> action</li><li>extension name starts with <code>x</code> means uninstalled, with an <code>install</code> action</li><li>extension name ends with <code>*</code> is published by @chemzqm, IMO, is official</li></ul><h6 id="Usage-2"><a href="#Usage-2" class="headerlink" title="Usage"></a>Usage</h6><ul><li><code>:CocList marketplace</code> list all available extensions</li><li><code>:CocList marketplace python</code> to search extension that name contains <code>python</code></li></ul><p><img src="/en/2021/04/15/2021/coc-vimrc/5cf885c18736a85017.png" alt="coc-marketplace"> </p><h5 id="coc-prettier"><a href="#coc-prettier" class="headerlink" title="coc-prettier"></a><a href="https://github.com/neoclide/coc-prettier">coc-prettier</a></h5><p>you can use <code>:Prettier</code> to format current buffer.<br>your can <code>&lt;leader&gt;f</code> for range format.</p><p>Prettier range format only support languageId including: <code>javascript</code>,<code>javascriptreact</code>, <code>typescript</code>, <code>typescriptreact</code>, <code>json</code> and <code>graphql</code>.</p><h6 id="Update-your-coc-settings-json-for-format-on-save"><a href="#Update-your-coc-settings-json-for-format-on-save" class="headerlink" title="Update your coc-settings.json for format on save"></a>Update your <code>coc-settings.json</code> for format on save</h6><p>Open settings file with:</p><pre><code>:CocConfig</code></pre><p>Add:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;coc.preferences.formatOnSaveFiletypes&quot;: [&quot;css&quot;, &quot;markdown&quot;],</span><br></pre></td></tr></table></figure><p>to setup the languages which you want to format on save.</p><h5 id="coc-snippets"><a href="#coc-snippets" class="headerlink" title="coc-snippets"></a><a href="https://github.com/neoclide/coc-snippets">coc-snippets</a></h5><table><thead><tr><th align="center">Shortcut</th><th align="center">Action</th></tr></thead><tbody><tr><td align="center"><code>Insert Mode</code>  <code>Ctrl</code> <code>l</code></td><td align="center">coc-snippets-expand<br>(trigger snippet expand)</td></tr><tr><td align="center"><code>Visual Mode</code>  <code>Ctrl</code> <code>j</code></td><td align="center">coc-snippets-select<br>(select text for visual placeholder of snippet)</td></tr><tr><td align="center"><code>Ctrl</code> <code>j</code></td><td align="center">coc_snippet_next<br>(jump to next placeholder, it’s default of coc.nvim)</td></tr><tr><td align="center"><code>Ctrl</code> <code>k</code></td><td align="center">coc_snippet_prev<br>(jump to previous placeholder, it’s default of coc.nvim)</td></tr><tr><td align="center"><code>xmap</code> <code>&lt;leader&gt;</code> <code>x</code></td><td align="center">coc-convert-snippet <br>(Use <leader>x for convert visual selected code to snippet)</td></tr><tr><td align="center"><code>imap</code> <code>&lt;C-j&gt;</code> <code>&lt;Plug&gt;</code></td><td align="center">coc-snippets-expand-jump <br>(Use <C-j> for both expand and jump (make expand higher priority.)</td></tr></tbody></table><p>Make <code>&lt;tab&gt;</code> used for trigger completion, completion confirm, snippet expand and jump like VSCode.</p><h6 id="vim-snippets"><a href="#vim-snippets" class="headerlink" title="vim-snippets"></a><a href="https://github.com/honza/vim-snippets">vim-snippets</a></h6><p>vim-snipmate default snippets (Previously snipmate-snippets)</p><p>This repository contains snippets files for various programming languages.</p><ul><li><code>snippets/*</code>: snippets using snipMate format</li><li><code>UltiSnips/*</code>: snippets using UltiSnips format</li></ul><h5 id="coc-explorer"><a href="#coc-explorer" class="headerlink" title="coc-explorer"></a><a href="https://github.com/weirongxu/coc-explorer">coc-explorer</a></h5><p>Explorer extension for <a href="https://github.com/neoclide/coc.nvim">coc.nvim</a></p><p><img src="/en/2021/04/15/2021/coc-vimrc/76720263-471be100-6777-11ea-82c1-614627097b02.png" alt="image"></p><ul><li>Open explorer <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;space&gt;e</span><br></pre></td></tr></table></figure></li></ul><h5 id="coc-translator"><a href="#coc-translator" class="headerlink" title="coc-translator"></a><a href="https://github.com/voldikss/coc-translator">coc-translator</a></h5><p>Translation extension for <a href="https://github.com/neoclide/coc.nvim">coc.nvim</a>.</p><p><img src="/en/2021/04/15/2021/coc-vimrc/103474126-b8e31b00-4ddb-11eb-916b-2e2d7b2b29e0.png"></p><table><thead><tr><th>Shortcut</th><th>Action</th></tr></thead><tbody><tr><td><code>&lt;Leader&gt;</code> <code>t</code></td><td>popup</td></tr><tr><td><code>&lt;Leader&gt;</code> <code>t</code></td><td>echo</td></tr><tr><td><code>&lt;Leader&gt;</code> <code>t</code></td><td>replace</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> coc-nvim </category>
          
          <category> vim </category>
          
          <category> document </category>
          
          <category> 文档 </category>
          
          <category> 代码编辑器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> coc-nvim </tag>
            
            <tag> neovim </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
